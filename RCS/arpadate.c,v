head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2001.07.18.17.27.03;	author matt;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.12.10.07;	author matt;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.29.14.18.08;	author matt;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.09.17.29.51;	author matt;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.05.17.01.29;	author matt;	state Exp;
branches;
next	;


desc
@Return date in RFC822 format
@


1.5
log
@Reverted to original version
@
text
@/*
 *  arpadate.c - get_arpadate() is a function returning the date in the
 *               ARPANET format (see RFC822 and RFC1123)
 *  Copyright (C) 1998 Hugo Haas
 *  
 *  Inspired by smail source code by Ronald S. Karr and Landon Curt Noll
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#define ARPADATE_LENGTH	32

#include <stdlib.h>
#include <stdio.h>
#include <time.h>

void 
get_arpadate (char *d_string)
{
  static char *week_day[] =
  {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
  static char *month[] =
  {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
   "Aug", "Sep", "Oct", "Nov", "Dec"};
  static char timezone[3];

  time_t current;
  struct tm *date;
  int offset, gmt_yday, gmt_hour, gmt_min;

  /* Get current time */
  (void) time (&current);

  /* Get GMT and then local dates */
  date = gmtime ((const time_t *) &current);
  gmt_yday = date->tm_yday;
  gmt_hour = date->tm_hour;
  gmt_min = date->tm_min;
  date = localtime ((const time_t *) &current);

  /* Calculates offset */

  offset = (date->tm_hour - gmt_hour) * 60 + (date->tm_min - gmt_min);
  /* Be careful, there can be problems if the day has changed between the
     evaluation of local and gmt's one */
  if (date->tm_yday != gmt_yday)
    {
      if (date->tm_yday == (gmt_yday + 1))
	offset += 1440;
      else if (date->tm_yday == (gmt_yday - 1))
	offset += 1440;
      else
	offset += (date->tm_yday > gmt_yday) ? -1440 : 1440;
    }

  if (offset >= 0)
    sprintf (timezone, "+%02d%02d", offset / 60, offset % 60);
  else
    sprintf (timezone, "-%02d%02d", -offset / 60, -offset % 60);

  sprintf (d_string, "%s, %d %s %04d %02d:%02d:%02d %s",
	   week_day[date->tm_wday],
	   date->tm_mday, month[date->tm_mon], date->tm_year + 1900,
	   date->tm_hour, date->tm_min, date->tm_sec, timezone);

}
@


1.4
log
@Some code clean-up
@
text
@d2 23
a24 22
* $Id$
*
*  arpadate.c - get_arpadate() is a function returning the date in the
*               ARPANET format (see RFC822 and RFC1123)
*  Copyright (C) 1998 Hugo Haas
*  
*  Inspired by smail source code by Ronald S. Karr and Landon Curt Noll
*
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
d29 2
a30 1
void get_arpadate(char *d_string)
d32 46
a77 42
	static char *week_day[] =
		{"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
	static char *month[] =
		{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
		"Aug", "Sep", "Oct", "Nov", "Dec"};
	static char timezone[6];

	time_t current;
	struct tm *date;
	int offset, gmt_yday, gmt_hour, gmt_min, yday;

	/* Get current time */
	(void) time (&current);

	/* Get GMT and then local dates */
	date = gmtime ((const time_t *) &current);
	gmt_yday = date->tm_yday;
	gmt_hour = date->tm_hour;
	gmt_min = date->tm_min;
	date = localtime ((const time_t *) &current);

	/* Calculates offset */
	offset = ((date->tm_hour - gmt_hour) * 60) + (date->tm_min - gmt_min);

	if ((yday = (date->tm_yday - gmt_yday))) {
	/* This code is optimised to negative timezones (West of Greenwich) */
	if (yday == -1 ||	/* UTC passed midnight before localtime */
		yday > 1)	/* UTC passed new year before localtime */
		offset -= 24 * 60;
	else
		offset += 24 * 60;
	}

	if (offset >= 0)
		sprintf (timezone, "+%02d%02d", offset / 60, offset % 60);
	else
		sprintf (timezone, "-%02d%02d", -offset / 60, -offset % 60);

	sprintf (d_string, "%s, %d %s %04d %02d:%02d:%02d %s",
		week_day[date->tm_wday],
		date->tm_mday, month[date->tm_mon], date->tm_year + 1900,
		date->tm_hour, date->tm_min, date->tm_sec, timezone);
@


1.3
log
@De-Americanised spelling
@
text
@d2 22
a23 23
 *  arpadate.c - get_arpadate() is a function returning the date in the
 *               ARPANET format (see RFC822 and RFC1123)
 *  Copyright (C) 1998 Hugo Haas
 *  
 *  Inspired by smail source code by Ronald S. Karr and Landon Curt Noll
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#define ARPADATE_LENGTH	32

d28 1
a28 2
void 
get_arpadate (char *d_string)
d30 20
a49 20
  static char *week_day[] =
  {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
  static char *month[] =
  {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
   "Aug", "Sep", "Oct", "Nov", "Dec"};
  static char timezone[6];

  time_t current;
  struct tm *date;
  int offset, gmt_yday, gmt_hour, gmt_min, yday;

  /* Get current time */
  (void) time (&current);

  /* Get GMT and then local dates */
  date = gmtime ((const time_t *) &current);
  gmt_yday = date->tm_yday;
  gmt_hour = date->tm_hour;
  gmt_min = date->tm_min;
  date = localtime ((const time_t *) &current);
d51 2
a52 1
  /* Calculates offset */
d54 1
a54 4
  offset = ((date->tm_hour - gmt_hour) * 60) + (date->tm_min - gmt_min);

  if ((yday = (date->tm_yday - gmt_yday)))
    {
d56 3
a58 3
	if (yday == -1 ||   /* UTC passed midnight before localtime */
	    yday > 1)       /* UTC passed new year before localtime */
	    offset -= 24 * 60;
d60 2
a61 2
	    offset += 24 * 60;
    }
d63 4
a66 9
  if (offset >= 0)
    sprintf (timezone, "+%02d%02d", offset / 60, offset % 60);
  else
    sprintf (timezone, "-%02d%02d", -offset / 60, -offset % 60);

  sprintf (d_string, "%s, %d %s %04d %02d:%02d:%02d %s",
	   week_day[date->tm_wday],
	   date->tm_mday, month[date->tm_mon], date->tm_year + 1900,
	   date->tm_hour, date->tm_min, date->tm_sec, timezone);
d68 4
@


1.2
log
@Checkpoint
@
text
@d59 1
a59 1
	/* This code is optimized to negative timezones (West of Greenwich) */
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
  static char timezone[3];
d41 1
a41 1
  int offset, gmt_yday, gmt_hour, gmt_min;
d55 3
a57 4
  offset = (date->tm_hour - gmt_hour) * 60 + (date->tm_min - gmt_min);
  /* Be careful, there can be problems if the day has changed between the
     evaluation of local and gmt's one */
  if (date->tm_yday != gmt_yday)
d59 6
a64 6
      if (date->tm_yday == (gmt_yday + 1))
	offset += 1440;
      else if (date->tm_yday == (gmt_yday - 1))
	offset += 1440;
      else
	offset += (date->tm_yday > gmt_yday) ? -1440 : 1440;
@
